/********************************************************************************
 * Copyright (c) 2021, 2023 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/
import java.nio.file.Files
import java.util.stream.Collectors

plugins {
    id 'java'
    id "dev.equo.p2deps" version "1.7.3"
}

apply from: "$rootDir/gradle/base.gradle"

import org.gradle.internal.os.OperatingSystem;

p2deps {
    into 'compileOnly', {
        addFilter('platform', {
            String os
            String ws
            String arch = System.getProperty('os.arch')
            if (arch == "amd64") {
                arch = "x86_64"
            }

            def platform = OperatingSystem.current()

            if (arch != "x86_64" && arch != "aarch64") {
                throw new IllegalStateException("Unsupported platform: ${platform}")
            }

            if (platform == OperatingSystem.LINUX) {
                os = "linux"
                ws = "gtk"
            } else if (platform == OperatingSystem.MAC_OS) {
                os = "macosx"
                ws = "cocoa"
            } else if (platform == OperatingSystem.WINDOWS && arch == "x86_64") {
                os = "win32"
                ws = "win32"
            } else {
                throw new IllegalStateException("Unsupported platform: ${platform}")
            }

            it.prop('osgi.os', os)
            it.prop('osgi.ws', ws)
            it.prop('osgi.arch', arch)
        })

        p2repo 'https://download.eclipse.org/eclipse/updates/4.26/'
        install 'com.ibm.icu'
        install 'org.apache.felix.scr'
        install 'org.eclipse.core.commands'
        install 'org.eclipse.core.contenttype'
        install 'org.eclipse.core.jobs'
        install 'org.eclipse.core.runtime'
        install 'org.eclipse.equinox.app'
        install 'org.eclipse.equinox.common'
        install 'org.eclipse.equinox.event'
        install 'org.eclipse.equinox.preferences'
        install 'org.eclipse.equinox.registry'
        install 'org.eclipse.osgi'

        install 'org.eclipse.help'
        install 'org.eclipse.jface'
        install 'org.eclipse.jface.text'
        install 'org.eclipse.swt'
        install 'org.eclipse.ui'
        install 'org.eclipse.platform.feature.group'


        p2repo 'https://download.eclipse.org/mat/1.14.0/update-site/'
        install 'org.eclipse.mat.api'
        install 'org.eclipse.mat.hprof'
        install 'org.eclipse.mat.parser'
        install 'org.eclipse.mat.report'
        install 'org.eclipse.mat.ui'

        p2repo 'https://raw.githubusercontent.com/wiki/eclipse/jifa/resources/MatCalciteRepository-1.5.0/'
        install 'MatCalcitePlugin'
    }
}

def depsDirName = "mat-deps"
def depsDirPath =
        project(':analysis:heap-dump:provider').projectDir.toPath().resolve('src/main/resources').resolve(depsDirName)

[':analysis:heap-dump:impl', ':analysis:heap-dump:provider', ':analysis:heap-dump:hook'].each {
    name ->
        project("$name") {
            ext {
                mat_deps_dir_name = depsDirName
                mat_deps_dir_path = depsDirPath.toAbsolutePath().toString()
                osgi_jar = 'org.eclipse.osgi-3.18.200.jar'
            }
        }
}

afterEvaluate {
    delete(depsDirPath)

    copy {
        from configurations.compileClasspath
        into "${depsDirPath}"
        include '*.jar'
    }

    List<String> jarNames = new ArrayList<>()
    Files.list(depsDirPath).map {
        it.toFile().getName()
    }.filter {
        it.endsWith(".jar") && !it.startsWith('heap-dump-analysis-impl')
    }.forEach {
        jarNames.add(it)
    }
    jarNames.add('heap-dump-analysis-impl-' + version + '.jar')
    def listFileName = 'list'
    Files.writeString(depsDirPath.resolve(listFileName), jarNames.stream().collect(Collectors.joining(",")))
}
