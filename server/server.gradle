/********************************************************************************
 * Copyright (c) 2020, 2023 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/
plugins {
    id 'application'
    id "org.springframework.boot" version "3.1.4"
}

apply from: "$rootDir/gradle/java.gradle"
apply plugin: 'io.spring.dependency-management'

springBoot {
    applicationName = 'jifa'
}

dependencies {
    implementation project(':common')
    implementation project(':analysis')

    runtimeOnly project(':analysis:heap-dump:provider')
    runtimeOnly project(':analysis:gc-log')
    runtimeOnly project(':analysis:thread-dump')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.retry:spring-retry'

    implementation 'io.kubernetes:client-java:18.0.1'

    implementation 'com.mysql:mysql-connector-j:8.0.33'
    runtimeOnly 'com.h2database:h2:2.2.220'

    implementation 'com.hierynomus:sshj:0.35.0'

    implementation 'com.aliyun.oss:aliyun-sdk-oss:3.17.0'

    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.506'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

run.enabled = false
jar.enabled = false
startScripts.enabled = false
distTar.enabled = false
distZip.enabled = false

mainClassName = 'org.eclipse.jifa.server.Launcher'

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}

tasks.named("processResources") {
    dependsOn(':frontend:build')
}

// for kryo
applicationDefaultJvmArgs = ['--add-opens=java.base/java.lang=ALL-UNNAMED',
                             '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED',
                             '-Djdk.util.zip.disableZip64ExtraFieldValidation=true']

import java.nio.file.Files
import java.security.KeyPair
import java.security.KeyPairGenerator

static void generateDevKey(File dir) {
    def pubKeyPath = dir.toPath().resolve('dev_rsa.pub')
    if (Files.exists(pubKeyPath)) {
        return
    }
    KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
    generator.initialize(2048);
    KeyPair keyPair = generator.generateKeyPair();

    String publicKeyEncoded =
            '-----BEGIN PUBLIC KEY-----\n' + Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded()) + '\n-----END PUBLIC KEY-----\n'
    Files.writeString(pubKeyPath, publicKeyEncoded)

    String privateKeyEncoded =
            '-----BEGIN PRIVATE KEY-----\n' + Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded()) + '\n-----END PRIVATE KEY-----\n'
    Files.writeString(dir.toPath().resolve('dev_rsa'), privateKeyEncoded)
}

afterEvaluate {
    generateDevKey(projectDir)
}

import org.springframework.boot.gradle.tasks.run.BootRun

static void setJvmOptionsAndDevKeys(BootRun bootRun) {
    bootRun.jvmArgs('--add-opens=java.base/java.lang=ALL-UNNAMED',
                    '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED',
                    '-Djdk.util.zip.disableZip64ExtraFieldValidation=true')
    bootRun.args('--jifa.public-key=file:' + bootRun.project.projectDir.toPath().resolve('dev_rsa.pub').toAbsolutePath().toString())
    bootRun.args('--jifa.private-key=file:' + bootRun.project.projectDir.toPath().resolve('dev_rsa').toAbsolutePath().toString())
}

static void setDatabase(BootRun bootRun) {
    // Note: adjust args here according to your environment
    bootRun.args('--jifa.database-host=localhost:3306')
    bootRun.args('--jifa.database-name=jifa')
    bootRun.args('--jifa.database-username=root')
    bootRun.args('--jifa.database-password=password')
}

tasks.register('runStandaloneWorker', BootRun) {
    group('jifa')
    classpath(project.sourceSets.main.runtimeClasspath)
    mainClass.convention(mainClassName)

    setJvmOptionsAndDevKeys(it)
}

tasks.register('runStandaloneWorkerWithMysql', BootRun) {
    group('jifa')
    classpath(project.sourceSets.main.runtimeClasspath)
    mainClass.convention(mainClassName)

    setJvmOptionsAndDevKeys(it)
    setDatabase(it)
}

tasks.register('runMaster', BootRun) {
    group('jifa')
    classpath(project.sourceSets.main.runtimeClasspath)
    mainClass.convention(mainClassName)

    args('--jifa.role=master', '--jifa.scheduling-strategy=static')
    setJvmOptionsAndDevKeys(it)
    setDatabase(it)
}

tasks.register('runStaticWorker', BootRun) {
    group('jifa')
    classpath(project.sourceSets.main.runtimeClasspath)
    mainClass.convention(mainClassName)

    args('--jifa.role=static-worker', '--jifa.port=9102')
    setJvmOptionsAndDevKeys(it)
    setDatabase(it)
}

bootJar {
    manifest {
        attributes('Implementation-Title': 'Eclipse Jifa')
    }
    archiveFileName = 'jifa.jar'
}

bootDistTar {
    archiveFileName = 'jifa.tar'
}

bootDistZip {
    archiveFileName = 'jifa.zip'
}